               -- Begineer Level --


Q1: Who is the senior most employee based on the job title?

SELECT title, levels FROM employee
ORDER BY levels desc
limit 1;

Q2:Which countries have the most invoices?
SELECT  billing_country, SUM(total) as "total" FROM invoice
GROUP BY billing_country
ORDER BY total desc
limit 1;

Q3: What are top 3 values of total invoice?
SELECT total FROM invoice
ORDER BY total desc
limit 3;

Q4: Which city has the best customers? We would like to throw a promotional Music Festival in the city we made the most money? Write a query that returns one city that has the highest sum of invoice totals. Return both the city name  & sum of all invoice totals.




SELECT * FROM invoice

SELECT billing_city as city, SUM(total) as total 
FROM invoice
GROUP BY billing_city
ORDER BY total desc
limit 1;

Q5: Who is the best customer? The customer who has spent the most money will be declared the best customer. Write a query that returns the person who has spent the most money.

SELECT  customer.customer_id, customer.first_name, customer.last_name, SUM(invoice.total)as total
FROM customer
JOIN invoice ON customer.customer_id = invoice.customer_id
GROUP BY customer.customer_id
ORDER BY total desc
limit 1;

                              --   Moderate Level -
							  
Q1: Write query to return the email, first name, last name and Genre of all Rock Music listeners. Return your list ordered alphabetically by email starting with A.

SELECT customer.email, customer.first_name, customer.last_name
FROM customer
JOIN invoice ON customer.customer_id = invoice.customer_id
JOIN invoice_line ON invoice.invoice_id = invoice_line.invoice_id
WHERE track_id IN (

                    SELECT track.track_id
                    FROM track
                    JOIN Genre ON track.genre_id = genre.genre_id
                    WHERE genre.name = 'Rock'

	)
	ORDER BY email ;
	SELECT 
Q2: Lets invite the artists who have written the most rock music in our dataset. Write a query that returns the the artist name and total track count of the top 10 rock bands.
	
	
SELECT artist.artist_id, COUNT(artist.artist_id) as number_of_songs_sung
	FROM artist
	JOIN album ON artist.artist_id = album.artist_id
	JOIN track ON album.album_id = track.album_id
	JOIN genre ON track.genre_id = genre.genre_id
	WHERE genre.name LIKE 'Rock'
	GROUP BY artist.artist_id
	ORDER BY number_of_songs_sung desc
	LIMIT 1;
	
	
Q3: Return all the track names that have the song length longer then the average song length. Return the name and milliseconds for each track. Order by the song length with the longest songs listed first.
	
	
	SELECT track.name, track.milliseconds FROM track
	WHERE milliseconds > (
		                    SELECT AVG(milliseconds) FROM track
		                    
	)
	
	ORDER BY track.milliseconds desc;
